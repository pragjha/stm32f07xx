
stm32f07xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f5c  08000f5c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f5c  08000f5c  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000f5c  08000f5c  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f5c  08000f5c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000418  0800137c  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800137c  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001dfd  00000000  00000000  00020483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a6a  00000000  00000000  00022280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a0  00000000  00000000  00022cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001dc  00000000  00000000  00022f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012b67  00000000  00000000  0002316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000038b1  00000000  00000000  00035cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090054  00000000  00000000  00039584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000790  00000000  00000000  000c95d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c9d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000418 	.word	0x20000418
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000f44 	.word	0x08000f44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000041c 	.word	0x2000041c
 8000104:	08000f44 	.word	0x08000f44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <USART2_Init+0x40>)
 8000236:	4a0f      	ldr	r2, [pc, #60]	; (8000274 <USART2_Init+0x44>)
 8000238:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <USART2_Init+0x40>)
 800023c:	22e1      	movs	r2, #225	; 0xe1
 800023e:	0252      	lsls	r2, r2, #9
 8000240:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <USART2_Init+0x40>)
 8000244:	2200      	movs	r2, #0
 8000246:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <USART2_Init+0x40>)
 800024a:	2200      	movs	r2, #0
 800024c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <USART2_Init+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <USART2_Init+0x40>)
 8000256:	2200      	movs	r2, #0
 8000258:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <USART2_Init+0x40>)
 800025c:	2200      	movs	r2, #0
 800025e:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <USART2_Init+0x40>)
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fd5d 	bl	8000d22 <USART_Init>
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000434 	.word	0x20000434
 8000274:	40004400 	.word	0x40004400

08000278 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2290      	movs	r2, #144	; 0x90
 8000282:	05d2      	lsls	r2, r2, #23
 8000284:	601a      	str	r2, [r3, #0]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2202      	movs	r2, #2
 800028a:	715a      	strb	r2, [r3, #5]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	721a      	strb	r2, [r3, #8]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2201      	movs	r2, #1
 8000296:	71da      	strb	r2, [r3, #7]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2202      	movs	r2, #2
 800029c:	719a      	strb	r2, [r3, #6]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2207      	movs	r2, #7
 80002a2:	725a      	strb	r2, [r3, #9]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2202      	movs	r2, #2
 80002a8:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&usart_gpios);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fa63 	bl	8000778 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2203      	movs	r2, #3
 80002b6:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&usart_gpios);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fa5c 	bl	8000778 <GPIO_Init>


}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b004      	add	sp, #16
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002ce:	210c      	movs	r1, #12
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2290      	movs	r2, #144	; 0x90
 80002d4:	05d2      	lsls	r2, r2, #23
 80002d6:	601a      	str	r2, [r3, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	711a      	strb	r2, [r3, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	715a      	strb	r2, [r3, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2202      	movs	r2, #2
 80002e8:	719a      	strb	r2, [r3, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	71da      	strb	r2, [r3, #7]

	GPIO_Init(&GPIOBtn);
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fa40 	bl	8000778 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002f8:	003b      	movs	r3, r7
 80002fa:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <GPIO_ButtonInit+0x70>)
 80002fc:	601a      	str	r2, [r3, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002fe:	003b      	movs	r3, r7
 8000300:	220c      	movs	r2, #12
 8000302:	711a      	strb	r2, [r3, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000304:	003b      	movs	r3, r7
 8000306:	2201      	movs	r2, #1
 8000308:	715a      	strb	r2, [r3, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030a:	003b      	movs	r3, r7
 800030c:	2202      	movs	r2, #2
 800030e:	719a      	strb	r2, [r3, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000310:	003b      	movs	r3, r7
 8000312:	2201      	movs	r2, #1
 8000314:	721a      	strb	r2, [r3, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <GPIO_ButtonInit+0x70>)
 800031e:	2101      	movs	r1, #1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 f977 	bl	8000614 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fa25 	bl	8000778 <GPIO_Init>

}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b006      	add	sp, #24
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	48000c00 	.word	0x48000c00

0800033c <delay>:

void delay(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	e002      	b.n	800034e <delay+0x12>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a03      	ldr	r2, [pc, #12]	; (8000360 <delay+0x24>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d9f8      	bls.n	8000348 <delay+0xc>
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0003d08f 	.word	0x0003d08f

08000364 <main>:


int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000368:	f7ff ffae 	bl	80002c8 <GPIO_ButtonInit>

	USART2_GPIOInit();
 800036c:	f7ff ff84 	bl	8000278 <USART2_GPIOInit>

    USART2_Init();
 8000370:	f7ff ff5e 	bl	8000230 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <main+0x48>)
 8000376:	2101      	movs	r1, #1
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fca1 	bl	8000cc0 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2100      	movs	r1, #0
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fb88 	bl	8000a9c <GPIO_ReadFromInputPin>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d0f7      	beq.n	8000380 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000390:	f7ff ffd4 	bl	800033c <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <main+0x4c>)
 8000396:	0018      	movs	r0, r3
 8000398:	f7ff feb6 	bl	8000108 <strlen>
 800039c:	0002      	movs	r2, r0
 800039e:	4904      	ldr	r1, [pc, #16]	; (80003b0 <main+0x4c>)
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <main+0x50>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fd4b 	bl	8000e3e <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003a8:	e7e9      	b.n	800037e <main+0x1a>
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40004400 	.word	0x40004400
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000434 	.word	0x20000434

080003b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003bc:	e7fe      	b.n	80003bc <NMI_Handler+0x4>

080003be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <HardFault_Handler+0x4>

080003c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003dc:	f000 fd7c 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f4:	f7ff fff7 	bl	80003e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	; (800043c <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041e:	f000 fd6d 	bl	8000efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff ff9f 	bl	8000364 <main>

08000426 <LoopForever>:

LoopForever:
    b LoopForever
 8000426:	e7fe      	b.n	8000426 <LoopForever>
  ldr   r0, =_estack
 8000428:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8000434:	08000f64 	.word	0x08000f64
  ldr r2, =_sbss
 8000438:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 800043c:	2000045c 	.word	0x2000045c

08000440 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC1_COMP_IRQHandler>
	...

08000444 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <RCC_GetPCLK1Value+0xe8>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	089b      	lsrs	r3, r3, #2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	2009      	movs	r0, #9
 8000454:	183b      	adds	r3, r7, r0
 8000456:	2103      	movs	r1, #3
 8000458:	400a      	ands	r2, r1
 800045a:	701a      	strb	r2, [r3, #0]

	if(clksrc == 0 )
 800045c:	183b      	adds	r3, r7, r0
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d102      	bne.n	800046a <RCC_GetPCLK1Value+0x26>
	{
		SystemClk = 16000000;
 8000464:	4b32      	ldr	r3, [pc, #200]	; (8000530 <RCC_GetPCLK1Value+0xec>)
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e010      	b.n	800048c <RCC_GetPCLK1Value+0x48>
	}else if(clksrc == 1)
 800046a:	2309      	movs	r3, #9
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d102      	bne.n	800047a <RCC_GetPCLK1Value+0x36>
	{
		SystemClk = 8000000;
 8000474:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <RCC_GetPCLK1Value+0xf0>)
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	e008      	b.n	800048c <RCC_GetPCLK1Value+0x48>
	}else if (clksrc == 2)
 800047a:	2309      	movs	r3, #9
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d103      	bne.n	800048c <RCC_GetPCLK1Value+0x48>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000484:	f000 f8c0 	bl	8000608 <RCC_GetPLLOutputClock>
 8000488:	0003      	movs	r3, r0
 800048a:	60fb      	str	r3, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <RCC_GetPCLK1Value+0xe8>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	b2da      	uxtb	r2, r3
 8000494:	2008      	movs	r0, #8
 8000496:	183b      	adds	r3, r7, r0
 8000498:	210f      	movs	r1, #15
 800049a:	400a      	ands	r2, r1
 800049c:	701a      	strb	r2, [r3, #0]

	if(temp < 8)
 800049e:	183b      	adds	r3, r7, r0
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b07      	cmp	r3, #7
 80004a4:	d804      	bhi.n	80004b0 <RCC_GetPCLK1Value+0x6c>
	{
		ahbp = 1;
 80004a6:	230b      	movs	r3, #11
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	e00a      	b.n	80004c6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80004b0:	2308      	movs	r3, #8
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	3b08      	subs	r3, #8
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <RCC_GetPCLK1Value+0xf4>)
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	5ad2      	ldrh	r2, [r2, r3]
 80004c0:	230b      	movs	r3, #11
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	701a      	strb	r2, [r3, #0]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <RCC_GetPCLK1Value+0xe8>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	0a9b      	lsrs	r3, r3, #10
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	2008      	movs	r0, #8
 80004d0:	183b      	adds	r3, r7, r0
 80004d2:	2107      	movs	r1, #7
 80004d4:	400a      	ands	r2, r1
 80004d6:	701a      	strb	r2, [r3, #0]

	if(temp < 4)
 80004d8:	183b      	adds	r3, r7, r0
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d804      	bhi.n	80004ea <RCC_GetPCLK1Value+0xa6>
	{
		apb1p = 1;
 80004e0:	230a      	movs	r3, #10
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e008      	b.n	80004fc <RCC_GetPCLK1Value+0xb8>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80004ea:	2308      	movs	r3, #8
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	1f1a      	subs	r2, r3, #4
 80004f2:	230a      	movs	r3, #10
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	4911      	ldr	r1, [pc, #68]	; (800053c <RCC_GetPCLK1Value+0xf8>)
 80004f8:	5c8a      	ldrb	r2, [r1, r2]
 80004fa:	701a      	strb	r2, [r3, #0]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80004fc:	230b      	movs	r3, #11
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	0019      	movs	r1, r3
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f7ff fe07 	bl	8000118 <__udivsi3>
 800050a:	0003      	movs	r3, r0
 800050c:	001a      	movs	r2, r3
 800050e:	230a      	movs	r3, #10
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f7ff fdfe 	bl	8000118 <__udivsi3>
 800051c:	0003      	movs	r3, r0
 800051e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	0018      	movs	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	b004      	add	sp, #16
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	40021000 	.word	0x40021000
 8000530:	00f42400 	.word	0x00f42400
 8000534:	007a1200 	.word	0x007a1200
 8000538:	20000400 	.word	0x20000400
 800053c:	20000410 	.word	0x20000410

08000540 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <RCC_GetPCLK2Value+0xb4>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	089b      	lsrs	r3, r3, #2
 8000550:	b2da      	uxtb	r2, r3
 8000552:	2009      	movs	r0, #9
 8000554:	183b      	adds	r3, r7, r0
 8000556:	2103      	movs	r1, #3
 8000558:	400a      	ands	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 800055c:	183b      	adds	r3, r7, r0
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <RCC_GetPCLK2Value+0x2a>
	{
		SystemClock = 16000000;
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <RCC_GetPCLK2Value+0xb8>)
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e001      	b.n	800056e <RCC_GetPCLK2Value+0x2e>
	}else
	{
		SystemClock = 8000000;
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <RCC_GetPCLK2Value+0xbc>)
 800056c:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <RCC_GetPCLK2Value+0xb4>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	220f      	movs	r2, #15
 8000576:	4013      	ands	r3, r2
 8000578:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b07      	cmp	r3, #7
 800057e:	d804      	bhi.n	800058a <RCC_GetPCLK2Value+0x4a>
	{
		ahbp = 1;
 8000580:	230b      	movs	r3, #11
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e008      	b.n	800059c <RCC_GetPCLK2Value+0x5c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3b08      	subs	r3, #8
 800058e:	001a      	movs	r2, r3
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <RCC_GetPCLK2Value+0xc0>)
 8000592:	0052      	lsls	r2, r2, #1
 8000594:	5ad2      	ldrh	r2, [r2, r3]
 8000596:	230b      	movs	r3, #11
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	701a      	strb	r2, [r3, #0]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <RCC_GetPCLK2Value+0xb4>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	0b5b      	lsrs	r3, r3, #13
 80005a2:	2207      	movs	r2, #7
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d804      	bhi.n	80005b8 <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;
 80005ae:	230a      	movs	r3, #10
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	e006      	b.n	80005c6 <RCC_GetPCLK2Value+0x86>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1f1a      	subs	r2, r3, #4
 80005bc:	230a      	movs	r3, #10
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	4910      	ldr	r1, [pc, #64]	; (8000604 <RCC_GetPCLK2Value+0xc4>)
 80005c2:	5c8a      	ldrb	r2, [r1, r2]
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80005c6:	230b      	movs	r3, #11
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	0019      	movs	r1, r3
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f7ff fda2 	bl	8000118 <__udivsi3>
 80005d4:	0003      	movs	r3, r0
 80005d6:	001a      	movs	r2, r3
 80005d8:	230a      	movs	r3, #10
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	0019      	movs	r1, r3
 80005e0:	0010      	movs	r0, r2
 80005e2:	f7ff fd99 	bl	8000118 <__udivsi3>
 80005e6:	0003      	movs	r3, r0
 80005e8:	603b      	str	r3, [r7, #0]

	return pclk2;
 80005ea:	683b      	ldr	r3, [r7, #0]
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	00f42400 	.word	0x00f42400
 80005fc:	007a1200 	.word	0x007a1200
 8000600:	20000400 	.word	0x20000400
 8000604:	20000410 	.word	0x20000410

08000608 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

	return 0;
 800060c:	2300      	movs	r3, #0
}
 800060e:	0018      	movs	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <GPIO_PeriClockControl>:
 */

#include <stm32f07xx_gpio_driver.h>
#include <stm32f072xb.h>
void GPIO_PeriClockControl(GPIO_TypeDef *pGPIOx, uint8_t EnorDi)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	000a      	movs	r2, r1
 800061e:	1cfb      	adds	r3, r7, #3
 8000620:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 8000622:	1cfb      	adds	r3, r7, #3
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d148      	bne.n	80006bc <GPIO_PeriClockControl+0xa8>
		{
			if(pGPIOx == GPIOA)
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	429a      	cmp	r2, r3
 8000632:	d107      	bne.n	8000644 <GPIO_PeriClockControl+0x30>
			{
				GPIOA_PCLK_EN();
 8000634:	4b44      	ldr	r3, [pc, #272]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	4b43      	ldr	r3, [pc, #268]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0289      	lsls	r1, r1, #10
 800063e:	430a      	orrs	r2, r1
 8000640:	615a      	str	r2, [r3, #20]
			{
				GPIOF_PCLK_DI();
			}
		}

}
 8000642:	e07d      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOB)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a41      	ldr	r2, [pc, #260]	; (800074c <GPIO_PeriClockControl+0x138>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d107      	bne.n	800065c <GPIO_PeriClockControl+0x48>
				GPIOB_PCLK_EN();
 800064c:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	02c9      	lsls	r1, r1, #11
 8000656:	430a      	orrs	r2, r1
 8000658:	615a      	str	r2, [r3, #20]
}
 800065a:	e071      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOC)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a3c      	ldr	r2, [pc, #240]	; (8000750 <GPIO_PeriClockControl+0x13c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d107      	bne.n	8000674 <GPIO_PeriClockControl+0x60>
				GPIOC_PCLK_EN();
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	0309      	lsls	r1, r1, #12
 800066e:	430a      	orrs	r2, r1
 8000670:	615a      	str	r2, [r3, #20]
}
 8000672:	e065      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOD)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a37      	ldr	r2, [pc, #220]	; (8000754 <GPIO_PeriClockControl+0x140>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d107      	bne.n	800068c <GPIO_PeriClockControl+0x78>
				GPIOD_PCLK_EN();
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0349      	lsls	r1, r1, #13
 8000686:	430a      	orrs	r2, r1
 8000688:	615a      	str	r2, [r3, #20]
}
 800068a:	e059      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOE)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a32      	ldr	r2, [pc, #200]	; (8000758 <GPIO_PeriClockControl+0x144>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d107      	bne.n	80006a4 <GPIO_PeriClockControl+0x90>
				GPIOE_PCLK_EN();
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	0389      	lsls	r1, r1, #14
 800069e:	430a      	orrs	r2, r1
 80006a0:	615a      	str	r2, [r3, #20]
}
 80006a2:	e04d      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOF)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <GPIO_PeriClockControl+0x148>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d149      	bne.n	8000740 <GPIO_PeriClockControl+0x12c>
				GPIOF_PCLK_EN();
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	03c9      	lsls	r1, r1, #15
 80006b6:	430a      	orrs	r2, r1
 80006b8:	615a      	str	r2, [r3, #20]
}
 80006ba:	e041      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			if(pGPIOx == GPIOA)
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d106      	bne.n	80006d4 <GPIO_PeriClockControl+0xc0>
				GPIOA_PCLK_DI();
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006cc:	4924      	ldr	r1, [pc, #144]	; (8000760 <GPIO_PeriClockControl+0x14c>)
 80006ce:	400a      	ands	r2, r1
 80006d0:	615a      	str	r2, [r3, #20]
}
 80006d2:	e035      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOB)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a1d      	ldr	r2, [pc, #116]	; (800074c <GPIO_PeriClockControl+0x138>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <GPIO_PeriClockControl+0xd6>
				GPIOB_PCLK_DI();
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006de:	695a      	ldr	r2, [r3, #20]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006e2:	4920      	ldr	r1, [pc, #128]	; (8000764 <GPIO_PeriClockControl+0x150>)
 80006e4:	400a      	ands	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
}
 80006e8:	e02a      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOC)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a18      	ldr	r2, [pc, #96]	; (8000750 <GPIO_PeriClockControl+0x13c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <GPIO_PeriClockControl+0xec>
				GPIOC_PCLK_DI();
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <GPIO_PeriClockControl+0x134>)
 80006f8:	491b      	ldr	r1, [pc, #108]	; (8000768 <GPIO_PeriClockControl+0x154>)
 80006fa:	400a      	ands	r2, r1
 80006fc:	615a      	str	r2, [r3, #20]
}
 80006fe:	e01f      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOD)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <GPIO_PeriClockControl+0x140>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d106      	bne.n	8000716 <GPIO_PeriClockControl+0x102>
				GPIOD_PCLK_DI();
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800070e:	4917      	ldr	r1, [pc, #92]	; (800076c <GPIO_PeriClockControl+0x158>)
 8000710:	400a      	ands	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
}
 8000714:	e014      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOE)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <GPIO_PeriClockControl+0x144>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <GPIO_PeriClockControl+0x118>
				GPIOE_PCLK_DI();
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000724:	4912      	ldr	r1, [pc, #72]	; (8000770 <GPIO_PeriClockControl+0x15c>)
 8000726:	400a      	ands	r2, r1
 8000728:	615a      	str	r2, [r3, #20]
}
 800072a:	e009      	b.n	8000740 <GPIO_PeriClockControl+0x12c>
			}else if (pGPIOx == GPIOF)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <GPIO_PeriClockControl+0x148>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d105      	bne.n	8000740 <GPIO_PeriClockControl+0x12c>
				GPIOF_PCLK_DI();
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <GPIO_PeriClockControl+0x134>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <GPIO_PeriClockControl+0x134>)
 800073a:	490e      	ldr	r1, [pc, #56]	; (8000774 <GPIO_PeriClockControl+0x160>)
 800073c:	400a      	ands	r2, r1
 800073e:	615a      	str	r2, [r3, #20]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	48000400 	.word	0x48000400
 8000750:	48000800 	.word	0x48000800
 8000754:	48000c00 	.word	0x48000c00
 8000758:	48001000 	.word	0x48001000
 800075c:	48001400 	.word	0x48001400
 8000760:	fffdffff 	.word	0xfffdffff
 8000764:	fffbffff 	.word	0xfffbffff
 8000768:	fff7ffff 	.word	0xfff7ffff
 800076c:	ffefffff 	.word	0xffefffff
 8000770:	ffdfffff 	.word	0xffdfffff
 8000774:	ffbfffff 	.word	0xffbfffff

08000778 <GPIO_Init>:
	 *
	 * @Note              -

	 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000778:	b5b0      	push	{r4, r5, r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
		 uint32_t temp=0; //temp. register
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

		 //enable the peripheral clock

		 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2101      	movs	r1, #1
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff42 	bl	8000614 <GPIO_PeriClockControl>

		//1 . configure the mode of gpio pin

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	795b      	ldrb	r3, [r3, #5]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d820      	bhi.n	80007da <GPIO_Init+0x62>
		{
			//the non interrupt mode
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	001a      	movs	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	409a      	lsls	r2, r3
 80007a6:	0013      	movs	r3, r2
 80007a8:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	2103      	movs	r1, #3
 80007b8:	4099      	lsls	r1, r3
 80007ba:	000b      	movs	r3, r1
 80007bc:	43db      	mvns	r3, r3
 80007be:	0019      	movs	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	400a      	ands	r2, r1
 80007c6:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	430a      	orrs	r2, r1
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	e0ae      	b.n	8000938 <GPIO_Init+0x1c0>

		}else
		{
			//interrupt mode
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	795b      	ldrb	r3, [r3, #5]
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d117      	bne.n	8000812 <GPIO_Init+0x9a>
			{
				//1. configure the FTSR
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e2:	4ba6      	ldr	r3, [pc, #664]	; (8000a7c <GPIO_Init+0x304>)
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	0019      	movs	r1, r3
 80007ec:	2301      	movs	r3, #1
 80007ee:	408b      	lsls	r3, r1
 80007f0:	0019      	movs	r1, r3
 80007f2:	4ba2      	ldr	r3, [pc, #648]	; (8000a7c <GPIO_Init+0x304>)
 80007f4:	430a      	orrs	r2, r1
 80007f6:	60da      	str	r2, [r3, #12]
				//Clear the corresponding RTSR bit
				EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f8:	4ba0      	ldr	r3, [pc, #640]	; (8000a7c <GPIO_Init+0x304>)
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	0019      	movs	r1, r3
 8000802:	2301      	movs	r3, #1
 8000804:	408b      	lsls	r3, r1
 8000806:	43db      	mvns	r3, r3
 8000808:	0019      	movs	r1, r3
 800080a:	4b9c      	ldr	r3, [pc, #624]	; (8000a7c <GPIO_Init+0x304>)
 800080c:	400a      	ands	r2, r1
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	e035      	b.n	800087e <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	2b05      	cmp	r3, #5
 8000818:	d117      	bne.n	800084a <GPIO_Init+0xd2>
			{
				//1 . configure the RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081a:	4b98      	ldr	r3, [pc, #608]	; (8000a7c <GPIO_Init+0x304>)
 800081c:	689a      	ldr	r2, [r3, #8]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	0019      	movs	r1, r3
 8000824:	2301      	movs	r3, #1
 8000826:	408b      	lsls	r3, r1
 8000828:	0019      	movs	r1, r3
 800082a:	4b94      	ldr	r3, [pc, #592]	; (8000a7c <GPIO_Init+0x304>)
 800082c:	430a      	orrs	r2, r1
 800082e:	609a      	str	r2, [r3, #8]
				//Clear the corresponding RTSR bit
				EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000830:	4b92      	ldr	r3, [pc, #584]	; (8000a7c <GPIO_Init+0x304>)
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	0019      	movs	r1, r3
 800083a:	2301      	movs	r3, #1
 800083c:	408b      	lsls	r3, r1
 800083e:	43db      	mvns	r3, r3
 8000840:	0019      	movs	r1, r3
 8000842:	4b8e      	ldr	r3, [pc, #568]	; (8000a7c <GPIO_Init+0x304>)
 8000844:	400a      	ands	r2, r1
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	e019      	b.n	800087e <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	2b06      	cmp	r3, #6
 8000850:	d115      	bne.n	800087e <GPIO_Init+0x106>
			{
				//1. configure both FTSR and RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000852:	4b8a      	ldr	r3, [pc, #552]	; (8000a7c <GPIO_Init+0x304>)
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	0019      	movs	r1, r3
 800085c:	2301      	movs	r3, #1
 800085e:	408b      	lsls	r3, r1
 8000860:	0019      	movs	r1, r3
 8000862:	4b86      	ldr	r3, [pc, #536]	; (8000a7c <GPIO_Init+0x304>)
 8000864:	430a      	orrs	r2, r1
 8000866:	609a      	str	r2, [r3, #8]
				//Clear the corresponding RTSR bit
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000868:	4b84      	ldr	r3, [pc, #528]	; (8000a7c <GPIO_Init+0x304>)
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	0019      	movs	r1, r3
 8000872:	2301      	movs	r3, #1
 8000874:	408b      	lsls	r3, r1
 8000876:	0019      	movs	r1, r3
 8000878:	4b80      	ldr	r3, [pc, #512]	; (8000a7c <GPIO_Init+0x304>)
 800087a:	430a      	orrs	r2, r1
 800087c:	60da      	str	r2, [r3, #12]
			}

			//2. configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791a      	ldrb	r2, [r3, #4]
 8000882:	2313      	movs	r3, #19
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0892      	lsrs	r2, r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791a      	ldrb	r2, [r3, #4]
 800088e:	2312      	movs	r3, #18
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	2103      	movs	r1, #3
 8000894:	400a      	ands	r2, r1
 8000896:	701a      	strb	r2, [r3, #0]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	2390      	movs	r3, #144	; 0x90
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d024      	beq.n	80008ee <GPIO_Init+0x176>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a75      	ldr	r2, [pc, #468]	; (8000a80 <GPIO_Init+0x308>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d01d      	beq.n	80008ea <GPIO_Init+0x172>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a74      	ldr	r2, [pc, #464]	; (8000a84 <GPIO_Init+0x30c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d016      	beq.n	80008e6 <GPIO_Init+0x16e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a72      	ldr	r2, [pc, #456]	; (8000a88 <GPIO_Init+0x310>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d00f      	beq.n	80008e2 <GPIO_Init+0x16a>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <GPIO_Init+0x314>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d008      	beq.n	80008de <GPIO_Init+0x166>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a6f      	ldr	r2, [pc, #444]	; (8000a90 <GPIO_Init+0x318>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <GPIO_Init+0x162>
 80008d6:	2305      	movs	r3, #5
 80008d8:	e00a      	b.n	80008f0 <GPIO_Init+0x178>
 80008da:	2300      	movs	r3, #0
 80008dc:	e008      	b.n	80008f0 <GPIO_Init+0x178>
 80008de:	2304      	movs	r3, #4
 80008e0:	e006      	b.n	80008f0 <GPIO_Init+0x178>
 80008e2:	2303      	movs	r3, #3
 80008e4:	e004      	b.n	80008f0 <GPIO_Init+0x178>
 80008e6:	2302      	movs	r3, #2
 80008e8:	e002      	b.n	80008f0 <GPIO_Init+0x178>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <GPIO_Init+0x178>
 80008ee:	2300      	movs	r3, #0
 80008f0:	2011      	movs	r0, #17
 80008f2:	183a      	adds	r2, r7, r0
 80008f4:	7013      	strb	r3, [r2, #0]
			SYSCFG_PCLK_EN();
 80008f6:	4b67      	ldr	r3, [pc, #412]	; (8000a94 <GPIO_Init+0x31c>)
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <GPIO_Init+0x31c>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	01c9      	lsls	r1, r1, #7
 8000900:	430a      	orrs	r2, r1
 8000902:	619a      	str	r2, [r3, #24]
			SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000904:	183b      	adds	r3, r7, r0
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	2312      	movs	r3, #18
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	409a      	lsls	r2, r3
 8000912:	0011      	movs	r1, r2
 8000914:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <GPIO_Init+0x320>)
 8000916:	2313      	movs	r3, #19
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3302      	adds	r3, #2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	5099      	str	r1, [r3, r2]

			//3 . enable the exti interrupt delivery using IMR
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000922:	4b56      	ldr	r3, [pc, #344]	; (8000a7c <GPIO_Init+0x304>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	0019      	movs	r1, r3
 800092c:	2301      	movs	r3, #1
 800092e:	408b      	lsls	r3, r1
 8000930:	0019      	movs	r1, r3
 8000932:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <GPIO_Init+0x304>)
 8000934:	430a      	orrs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
		}

		//2. configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	799b      	ldrb	r3, [r3, #6]
 800093c:	001a      	movs	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	409a      	lsls	r2, r3
 8000946:	0013      	movs	r3, r2
 8000948:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2103      	movs	r1, #3
 8000958:	4099      	lsls	r1, r3
 800095a:	000b      	movs	r3, r1
 800095c:	43db      	mvns	r3, r3
 800095e:	0019      	movs	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6899      	ldr	r1, [r3, #8]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	430a      	orrs	r2, r1
 8000976:	609a      	str	r2, [r3, #8]

		//3. configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	79db      	ldrb	r3, [r3, #7]
 800097c:	001a      	movs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	791b      	ldrb	r3, [r3, #4]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	409a      	lsls	r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2103      	movs	r1, #3
 8000998:	4099      	lsls	r1, r3
 800099a:	000b      	movs	r3, r1
 800099c:	43db      	mvns	r3, r3
 800099e:	0019      	movs	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	400a      	ands	r2, r1
 80009a6:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68d9      	ldr	r1, [r3, #12]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	60da      	str	r2, [r3, #12]


		//4. configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7a1b      	ldrb	r3, [r3, #8]
 80009bc:	001a      	movs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	0019      	movs	r1, r3
 80009d4:	2301      	movs	r3, #1
 80009d6:	408b      	lsls	r3, r1
 80009d8:	43db      	mvns	r3, r3
 80009da:	0019      	movs	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	400a      	ands	r2, r1
 80009e2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6859      	ldr	r1, [r3, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	605a      	str	r2, [r3, #4]

		//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	795b      	ldrb	r3, [r3, #5]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d13b      	bne.n	8000a74 <GPIO_Init+0x2fc>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791a      	ldrb	r2, [r3, #4]
 8000a00:	2410      	movs	r4, #16
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	08d2      	lsrs	r2, r2, #3
 8000a06:	701a      	strb	r2, [r3, #0]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	791a      	ldrb	r2, [r3, #4]
 8000a0c:	250f      	movs	r5, #15
 8000a0e:	197b      	adds	r3, r7, r5
 8000a10:	2107      	movs	r1, #7
 8000a12:	400a      	ands	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	193a      	adds	r2, r7, r4
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	3208      	adds	r2, #8
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	58d1      	ldr	r1, [r2, r3]
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	0013      	movs	r3, r2
 8000a30:	43db      	mvns	r3, r3
 8000a32:	0018      	movs	r0, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	193a      	adds	r2, r7, r4
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	4001      	ands	r1, r0
 8000a3e:	3208      	adds	r2, #8
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	50d1      	str	r1, [r2, r3]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	193a      	adds	r2, r7, r4
 8000a4a:	7812      	ldrb	r2, [r2, #0]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	58d1      	ldr	r1, [r2, r3]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7a5b      	ldrb	r3, [r3, #9]
 8000a56:	001a      	movs	r2, r3
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	193a      	adds	r2, r7, r4
 8000a6a:	7812      	ldrb	r2, [r2, #0]
 8000a6c:	4301      	orrs	r1, r0
 8000a6e:	3208      	adds	r2, #8
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	50d1      	str	r1, [r2, r3]
		}

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b006      	add	sp, #24
 8000a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a7c:	40010400 	.word	0x40010400
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48000800 	.word	0x48000800
 8000a88:	48000c00 	.word	0x48000c00
 8000a8c:	48001000 	.word	0x48001000
 8000a90:	48001400 	.word	0x48001400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000

08000a9c <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_TypeDef *pGPIOx, uint8_t PinNumber)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	1cfb      	adds	r3, r7, #3
 8000aa8:	701a      	strb	r2, [r3, #0]
	uint8_t value;
    value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	1cfb      	adds	r3, r7, #3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	40da      	lsrs	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	200f      	movs	r0, #15
 8000aba:	183b      	adds	r3, r7, r0
 8000abc:	2101      	movs	r1, #1
 8000abe:	400a      	ands	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
    return value;
 8000ac2:	183b      	adds	r3, r7, r0
 8000ac4:	781b      	ldrb	r3, [r3, #0]
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <USART_SetBaudRate>:
#include <stm32f072xb_rcc_driver.h>



void USART_SetBaudRate(USART_TypeDef *pUSARTx, uint32_t BaudRate)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART4)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a37      	ldr	r2, [pc, #220]	; (8000bc0 <USART_SetBaudRate+0xf0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d003      	beq.n	8000aee <USART_SetBaudRate+0x1e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a36      	ldr	r2, [pc, #216]	; (8000bc4 <USART_SetBaudRate+0xf4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d104      	bne.n	8000af8 <USART_SetBaudRate+0x28>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000aee:	f7ff fd27 	bl	8000540 <RCC_GetPCLK2Value>
 8000af2:	0003      	movs	r3, r0
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	e003      	b.n	8000b00 <USART_SetBaudRate+0x30>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000af8:	f7ff fca4 	bl	8000444 <RCC_GetPCLK1Value>
 8000afc:	0003      	movs	r3, r0
 8000afe:	61fb      	str	r3, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8_Pos))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d00e      	beq.n	8000b2a <USART_SetBaudRate+0x5a>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	0013      	movs	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	189b      	adds	r3, r3, r2
 8000b14:	009a      	lsls	r2, r3, #2
 8000b16:	189a      	adds	r2, r3, r2
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	0010      	movs	r0, r2
 8000b20:	f7ff fafa 	bl	8000118 <__udivsi3>
 8000b24:	0003      	movs	r3, r0
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	e00d      	b.n	8000b46 <USART_SetBaudRate+0x76>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	189b      	adds	r3, r3, r2
 8000b32:	009a      	lsls	r2, r3, #2
 8000b34:	189a      	adds	r2, r3, r2
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	f7ff faeb 	bl	8000118 <__udivsi3>
 8000b42:	0003      	movs	r3, r0
 8000b44:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2164      	movs	r1, #100	; 0x64
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fae4 	bl	8000118 <__udivsi3>
 8000b50:	0003      	movs	r3, r0
 8000b52:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2264      	movs	r2, #100	; 0x64
 8000b62:	4353      	muls	r3, r2
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8_Pos))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	4013      	ands	r3, r2
 8000b74:	d00c      	beq.n	8000b90 <USART_SetBaudRate+0xc0>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	3332      	adds	r3, #50	; 0x32
 8000b7c:	2164      	movs	r1, #100	; 0x64
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff faca 	bl	8000118 <__udivsi3>
 8000b84:	0003      	movs	r3, r0
 8000b86:	001a      	movs	r2, r3
 8000b88:	2307      	movs	r3, #7
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e00b      	b.n	8000ba8 <USART_SetBaudRate+0xd8>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3332      	adds	r3, #50	; 0x32
 8000b96:	2164      	movs	r1, #100	; 0x64
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fabd 	bl	8000118 <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	60da      	str	r2, [r3, #12]
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b008      	add	sp, #32
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40004c00 	.word	0x40004c00

08000bc8 <USART_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_TypeDef *pUSARTx, uint8_t EnorDi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	1cfb      	adds	r3, r7, #3
 8000bd4:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 8000bd6:	1cfb      	adds	r3, r7, #3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d12f      	bne.n	8000c3e <USART_PeriClockControl+0x76>
			{
				if(pUSARTx == USART1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <USART_PeriClockControl+0xd4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d107      	bne.n	8000bf6 <USART_PeriClockControl+0x2e>
				{
					USART1_PCLK_EN();
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	01c9      	lsls	r1, r1, #7
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	619a      	str	r2, [r3, #24]
				}else if (pUSARTx == USART4)
				{
					USART4_PCLK_DI();
				}
			}
}
 8000bf4:	e04e      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				}else if (pUSARTx == USART2)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <USART_PeriClockControl+0xdc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d107      	bne.n	8000c0e <USART_PeriClockControl+0x46>
					USART2_PCLK_EN();
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c00:	69da      	ldr	r2, [r3, #28]
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0289      	lsls	r1, r1, #10
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	61da      	str	r2, [r3, #28]
}
 8000c0c:	e042      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				}else if (pUSARTx == USART3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <USART_PeriClockControl+0xe0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d107      	bne.n	8000c26 <USART_PeriClockControl+0x5e>
					USART3_PCLK_EN();
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	02c9      	lsls	r1, r1, #11
 8000c20:	430a      	orrs	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
}
 8000c24:	e036      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				}else if (pUSARTx == USART4)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <USART_PeriClockControl+0xe4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d132      	bne.n	8000c94 <USART_PeriClockControl+0xcc>
					USART4_PCLK_EN();
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c30:	69da      	ldr	r2, [r3, #28]
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0309      	lsls	r1, r1, #12
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	61da      	str	r2, [r3, #28]
}
 8000c3c:	e02a      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				if(pUSARTx == USART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <USART_PeriClockControl+0xd4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d106      	bne.n	8000c54 <USART_PeriClockControl+0x8c>
					USART1_PCLK_DI();
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c48:	699a      	ldr	r2, [r3, #24]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c4c:	4918      	ldr	r1, [pc, #96]	; (8000cb0 <USART_PeriClockControl+0xe8>)
 8000c4e:	400a      	ands	r2, r1
 8000c50:	619a      	str	r2, [r3, #24]
}
 8000c52:	e01f      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				}else if (pUSARTx == USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <USART_PeriClockControl+0xdc>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d106      	bne.n	8000c6a <USART_PeriClockControl+0xa2>
					USART2_PCLK_DI();
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c5e:	69da      	ldr	r2, [r3, #28]
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c62:	4914      	ldr	r1, [pc, #80]	; (8000cb4 <USART_PeriClockControl+0xec>)
 8000c64:	400a      	ands	r2, r1
 8000c66:	61da      	str	r2, [r3, #28]
}
 8000c68:	e014      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				}else if (pUSARTx == USART3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <USART_PeriClockControl+0xe0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d106      	bne.n	8000c80 <USART_PeriClockControl+0xb8>
					USART3_PCLK_DI();
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c74:	69da      	ldr	r2, [r3, #28]
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c78:	490f      	ldr	r1, [pc, #60]	; (8000cb8 <USART_PeriClockControl+0xf0>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	61da      	str	r2, [r3, #28]
}
 8000c7e:	e009      	b.n	8000c94 <USART_PeriClockControl+0xcc>
				}else if (pUSARTx == USART4)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <USART_PeriClockControl+0xe4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d105      	bne.n	8000c94 <USART_PeriClockControl+0xcc>
					USART4_PCLK_DI();
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c8a:	69da      	ldr	r2, [r3, #28]
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <USART_PeriClockControl+0xd8>)
 8000c8e:	490b      	ldr	r1, [pc, #44]	; (8000cbc <USART_PeriClockControl+0xf4>)
 8000c90:	400a      	ands	r2, r1
 8000c92:	61da      	str	r2, [r3, #28]
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	40004c00 	.word	0x40004c00
 8000cb0:	ffffbfff 	.word	0xffffbfff
 8000cb4:	fffdffff 	.word	0xfffdffff
 8000cb8:	fffbffff 	.word	0xfffbffff
 8000cbc:	fff7ffff 	.word	0xfff7ffff

08000cc0 <USART_PeripheralControl>:

void USART_PeripheralControl(USART_TypeDef *pUSARTx, uint8_t EnOrDi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	000a      	movs	r2, r1
 8000cca:	1cfb      	adds	r3, r7, #3
 8000ccc:	701a      	strb	r2, [r3, #0]
	if(EnOrDi==ENABLE)
 8000cce:	1cfb      	adds	r3, r7, #3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d106      	bne.n	8000ce4 <USART_PeripheralControl+0x24>
	{
		pUSARTx->CR1 |=(1<<0);  //enabling UE bit of USART_CR1 register
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
	else
	{
		pUSARTx->CR1 &= ~(1<<0); //disabling UE bit of USART_CR1 register
	}

}
 8000ce2:	e006      	b.n	8000cf2 <USART_PeripheralControl+0x32>
		pUSARTx->CR1 &= ~(1<<0); //disabling UE bit of USART_CR1 register
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4393      	bics	r3, r2
 8000cec:	001a      	movs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <USARTGetFlagStatus>:

uint8_t USARTGetFlagStatus(USART_TypeDef *pUSARTx, uint8_t StatusFlagName)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	000a      	movs	r2, r1
 8000d04:	1cfb      	adds	r3, r7, #3
 8000d06:	701a      	strb	r2, [r3, #0]
  if(pUSARTx->ISR & StatusFlagName)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	1cfa      	adds	r2, r7, #3
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	4013      	ands	r3, r2
 8000d12:	d001      	beq.n	8000d18 <USARTGetFlagStatus+0x1e>
  {
	  return SET;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <USARTGetFlagStatus+0x20>
  }
  return RESET;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg=0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

		//Implement the code to enable the Clock for given USART peripheral
		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2101      	movs	r1, #1
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff47 	bl	8000bc8 <USART_PeriClockControl>

		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	791b      	ldrb	r3, [r3, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d104      	bne.n	8000d4c <USART_Init+0x2a>
		{
			//Implement the code to enable the Receiver bit field
			tempreg|= (1 << USART_CR1_RE_Pos);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2204      	movs	r2, #4
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e014      	b.n	8000d76 <USART_Init+0x54>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	791b      	ldrb	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <USART_Init+0x3c>
		{
			//Implement the code to enable the Transmitter bit field
			tempreg |= ( 1 << USART_CR1_TE_Pos );
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2208      	movs	r2, #8
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e00b      	b.n	8000d76 <USART_Init+0x54>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d107      	bne.n	8000d76 <USART_Init+0x54>
		{
			//Implement the code to enable the both Transmitter and Receiver bit fields
			tempreg |= ( 1 << USART_CR1_RE_Pos) ;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
			tempreg |=( 1 << USART_CR1_TE_Pos) ;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2208      	movs	r2, #8
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
		}

	    //Implement the code to configure the Word length configuration item
		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M_Pos ;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7b5b      	ldrb	r3, [r3, #13]
 8000d7a:	031b      	lsls	r3, r3, #12
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]


	    //Configuration of parity control bit fields
		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7b9b      	ldrb	r3, [r3, #14]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d105      	bne.n	8000d98 <USART_Init+0x76>
		{
			//Implement the code to enable the parity control
			tempreg |= ( 1 << USART_CR1_PCE_Pos);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e00d      	b.n	8000db4 <USART_Init+0x92>

			//Implement the code to enable EVEN parity
			//Not required because by default EVEN parity will be selected once you enable the parity control

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7b9b      	ldrb	r3, [r3, #14]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d109      	bne.n	8000db4 <USART_Init+0x92>
		{
			//Implement the code to enable the parity control
		    tempreg |= ( 1 << USART_CR1_PCE_Pos);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]

		    //Implement the code to enable ODD parity
		    tempreg |= ( 1 << USART_CR1_PS_Pos);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

		}

	   //Program the CR1 register
		pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	601a      	str	r2, [r3, #0]

	/******************************** Configuration of CR2******************************************/

		tempreg=0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP_Pos;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7b1b      	ldrb	r3, [r3, #12]
 8000dc4:	031b      	lsls	r3, r3, #12
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]

	/******************************** Configuration of CR3******************************************/

		tempreg=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7bdb      	ldrb	r3, [r3, #15]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d105      	bne.n	8000dee <USART_Init+0xcc>
		{
			//Implement the code to enable CTS flow control
			tempreg |= ( 1 << USART_CR3_CTSE_Pos);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4313      	orrs	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e017      	b.n	8000e1e <USART_Init+0xfc>


		}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7bdb      	ldrb	r3, [r3, #15]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d105      	bne.n	8000e02 <USART_Init+0xe0>
		{
			//Implement the code to enable RTS flow control
			tempreg |= ( 1 << USART_CR3_RTSE_Pos);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	0052      	lsls	r2, r2, #1
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e00d      	b.n	8000e1e <USART_Init+0xfc>

		}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7bdb      	ldrb	r3, [r3, #15]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d109      	bne.n	8000e1e <USART_Init+0xfc>
		{
			//Implement the code to enable both CTS and RTS Flow control
			tempreg |= ( 1 << USART_CR3_CTSE_Pos);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE_Pos);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	0052      	lsls	r2, r2, #1
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	609a      	str	r2, [r3, #8]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

		//Implement the code to configure the baud rate
		USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	0019      	movs	r1, r3
 8000e30:	0010      	movs	r0, r2
 8000e32:	f7ff fe4d 	bl	8000ad0 <USART_SetBaudRate>
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <USART_SendData>:

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	   //Loop over until "Len" number of bytes are transferred
		for(uint32_t i = 0 ; i < Len; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e031      	b.n	8000eb4 <USART_SendData+0x76>
		{
			//Implement the code to wait until TXE flag is set in the SR
			while(! USARTGetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff4e 	bl	8000cfa <USARTGetFlagStatus>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d0f7      	beq.n	8000e52 <USART_SendData+0x14>

			//Check the USART_WordLength item for 9BIT or 8BIT in a frame
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	7b5b      	ldrb	r3, [r3, #13]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d118      	bne.n	8000e9c <USART_SendData+0x5e>
			{
				//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
				pdata = (uint16_t*) pTxBuffer;
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
				pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	05d2      	lsls	r2, r2, #23
 8000e78:	0dd2      	lsrs	r2, r2, #23
 8000e7a:	b292      	uxth	r2, r2
 8000e7c:	851a      	strh	r2, [r3, #40]	; 0x28

				//check for USART_ParityControl
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	7b9b      	ldrb	r3, [r3, #14]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <USART_SendData+0x56>
				{
					//No parity is used in this transfer , so 9bits of user data will be sent
					//Implement the code to increment pTxBuffer twice
					pTxBuffer++;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
					pTxBuffer++;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	e00c      	b.n	8000eae <USART_SendData+0x70>
				}
				else
				{
					//Parity bit is used in this transfer . so 8bits of user data will be sent
					//The 9th bit will be replaced by parity bit by the hardware
					pTxBuffer++;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	e008      	b.n	8000eae <USART_SendData+0x70>
				}
			}
			else
			{
				//This is 8bit data transfer
				pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	851a      	strh	r2, [r3, #40]	; 0x28

				//Implement the code to increment the buffer address
				pTxBuffer++;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = 0 ; i < Len; i++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3c9      	bcc.n	8000e50 <USART_SendData+0x12>
			}
		}

		//Implement the code to wait till TC flag is set in the SR
		while( ! USARTGetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff18 	bl	8000cfa <USARTGetFlagStatus>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d0f7      	beq.n	8000ebe <USART_SendData+0x80>
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b006      	add	sp, #24
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	18d2      	adds	r2, r2, r3
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000414 	.word	0x20000414
 8000ef8:	20000458 	.word	0x20000458

08000efc <__libc_init_array>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	2600      	movs	r6, #0
 8000f00:	4c0c      	ldr	r4, [pc, #48]	; (8000f34 <__libc_init_array+0x38>)
 8000f02:	4d0d      	ldr	r5, [pc, #52]	; (8000f38 <__libc_init_array+0x3c>)
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	10a4      	asrs	r4, r4, #2
 8000f08:	42a6      	cmp	r6, r4
 8000f0a:	d109      	bne.n	8000f20 <__libc_init_array+0x24>
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	f000 f819 	bl	8000f44 <_init>
 8000f12:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <__libc_init_array+0x40>)
 8000f14:	4d0a      	ldr	r5, [pc, #40]	; (8000f40 <__libc_init_array+0x44>)
 8000f16:	1b64      	subs	r4, r4, r5
 8000f18:	10a4      	asrs	r4, r4, #2
 8000f1a:	42a6      	cmp	r6, r4
 8000f1c:	d105      	bne.n	8000f2a <__libc_init_array+0x2e>
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	00b3      	lsls	r3, r6, #2
 8000f22:	58eb      	ldr	r3, [r5, r3]
 8000f24:	4798      	blx	r3
 8000f26:	3601      	adds	r6, #1
 8000f28:	e7ee      	b.n	8000f08 <__libc_init_array+0xc>
 8000f2a:	00b3      	lsls	r3, r6, #2
 8000f2c:	58eb      	ldr	r3, [r5, r3]
 8000f2e:	4798      	blx	r3
 8000f30:	3601      	adds	r6, #1
 8000f32:	e7f2      	b.n	8000f1a <__libc_init_array+0x1e>
 8000f34:	08000f5c 	.word	0x08000f5c
 8000f38:	08000f5c 	.word	0x08000f5c
 8000f3c:	08000f60 	.word	0x08000f60
 8000f40:	08000f5c 	.word	0x08000f5c

08000f44 <_init>:
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4a:	bc08      	pop	{r3}
 8000f4c:	469e      	mov	lr, r3
 8000f4e:	4770      	bx	lr

08000f50 <_fini>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f56:	bc08      	pop	{r3}
 8000f58:	469e      	mov	lr, r3
 8000f5a:	4770      	bx	lr
